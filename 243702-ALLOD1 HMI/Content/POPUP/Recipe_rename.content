<div id="Recipe_rename_1" data-tchmi-type="TcHmi.Controls.System.TcHmiContent" data-tchmi-top="0" data-tchmi-left="0" data-tchmi-width="400" data-tchmi-height="200" data-tchmi-creator-locked="True">

<div id="TcHmiInput_3" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiInput" data-tchmi-auto-focus-out="True" data-tchmi-height="30" data-tchmi-height-unit="px" data-tchmi-left="10" data-tchmi-left-unit="px" data-tchmi-reset-to-last-valid-value="True" data-tchmi-text="%i%RecipeNameNew|BindingMode=TwoWay%/i%" data-tchmi-top="50" data-tchmi-top-unit="px" data-tchmi-width="380" data-tchmi-width-unit="px" data-tchmi-text-font-weight="Bold" data-tchmi-text-font-size="17">
<script data-tchmi-target-attribute="data-tchmi-content-padding" type="application/json">
{
  "left": 10,
  "right": 0,
  "top": 0,
  "bottom": 0,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>


<script data-tchmi-target-attribute="data-tchmi-border-radius" type="application/json">
{
  "topLeft": 15.0,
  "topRight": 15.0,
  "bottomLeft": 15.0,
  "bottomRight": 15.0,
  "topLeftUnit": "px",
  "topRightUnit": "px",
  "bottomLeftUnit": "px",
  "bottomRightUnit": "px"
}
</script>
</div>
<div id="TcHmiButton_16" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="60" data-tchmi-height-unit="px" data-tchmi-left="100" data-tchmi-left-unit="px" data-tchmi-top="125" data-tchmi-top-unit="px" data-tchmi-width="200" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-icon-width="35" data-tchmi-icon-horizontal-alignment="Left" data-tchmi-text-font-size="17" data-tchmi-text-font-weight="Bold" data-tchmi-text="%l%Rename%/l%" data-tchmi-icon="Images/Icons/Icon_rename.png">
<script data-tchmi-target-attribute="data-tchmi-border-radius" type="application/json">
{
  "topLeft": 15.0,
  "topRight": 15.0,
  "bottomLeft": 15.0,
  "bottomRight": 15.0,
  "topLeftUnit": "px",
  "topRightUnit": "px",
  "bottomLeftUnit": "px",
  "bottomRightUnit": "px"
}
</script>







<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(229, 229, 229, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-icon-padding" type="application/json">
{
  "left": 10,
  "right": 0,
  "top": 0,
  "bottom": 0,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-text-padding" type="application/json">
{
  "left": 20,
  "right": 0,
  "top": 0,
  "bottom": 0,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>







<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%ctx%owner::Id|EventRegistrationMode=Resolve%/ctx%.onPressed",
    "actions": [
      {
        "objectType": "SwitchCase",
        "active": true,
        "compare": {
          "objectType": "Symbol",
          "valueType": "tchmi:general#/definitions/INT",
          "symbolExpression": "%i%RecipeType%/i%"
        },
        "cases": [
          {
            "caseValue": {
              "objectType": "StaticValue",
              "valueType": "tchmi:general#/definitions/INT",
              "value": 0
            },
            "actions": [
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%s%ADS.PLC1.Recipes.Production.sName%/s%",
                "value": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:general#/definitions/STRING%2880%29",
                  "symbolExpression": "%i%RecipeNameNew%/i%"
                },
                "asyncWait": true
              },
              {
                "objectType": "JavaScript",
                "active": true,
                "sourceLines": [
                  "// Read current PLC date-time and write user + time info into recipe structure",
                  "TcHmi.Symbol.readEx2(",
                  "    '%s%ADS.PLC1.GV.stTime.sDateTime%/s%',",
                  "    function (data) {",
                  "        if (data.error === TcHmi.Errors.NONE) {",
                  "            let datetime = data.value;",
                  "",
                  "            // Extract current user name from HMI",
                  "            let user = TcHmi.Server.getCurrentUser();",
                  "",
                  "            // Define what to write to PLC",
                  "            const valuesToWrite = [",
                  "                { symbol: '%s%ADS.PLC1.Recipes.Production.stInfo.sUserEdited%/s%', value: user },",
                  "                { symbol: '%s%ADS.PLC1.Recipes.Production.stInfo.sTimeEdited%/s%', value: datetime }",
                  "            ];",
                  "",
                  "            // Function to write one-by-one",
                  "            function writeSymbols(index = 0, onComplete) {",
                  "                if (index >= valuesToWrite.length) {",
                  "                    onComplete && onComplete(); // Call callback when all done",
                  "                    return;",
                  "                }",
                  "",
                  "                const { symbol, value } = valuesToWrite[index];",
                  "                TcHmi.Symbol.writeEx(symbol, value, function (result) {",
                  "                    if (result.error === TcHmi.Errors.NONE) {",
                  "                        writeSymbols(index + 1, onComplete);",
                  "                    } else {",
                  "                        console.error(`Write failed at ${symbol}:`, result.errorMessage);",
                  "                    }",
                  "                });",
                  "            }",
                  "",
                  "            // Start writing, and on complete, read recipe name and create recipe",
                  "            writeSymbols(0, function () {",
                  "                TcHmi.Symbol.readEx2('%i%RecipeNameCurr%/i%', function (dataOld) {",
                  "                    if (dataOld.error === TcHmi.Errors.NONE) {",
                  "                        let recipeNameOld = dataOld.value;",
                  "",
                  "                        TcHmi.Symbol.readEx2('%s%ADS.PLC1.Recipes.Production.sName%/s%', function (dataNew) {",
                  "                            if (dataNew.error === TcHmi.Errors.NONE) {",
                  "                                let recipeNameNew = dataNew.value;",
                  "",
                  "                                if (recipeNameOld !== recipeNameNew) {",
                  "                                    TcHmi.Server.RecipeManagement.teachAsNewRecipe(",
                  "                                        'Production::' + recipeNameOld,",
                  "                                        '',",
                  "                                        'Production::' + recipeNameNew,",
                  "                                        '',",
                  "                                        function (result) {",
                  "                                            if (result.error === TcHmi.Errors.NONE) {",
                  "                                                const status = 'Recipe created successfully: ' + recipeNameNew;",
                  "                                                TcHmi.Symbol.writeEx('%i%RecipeStatusMsg%/i%', status, function () {});",
                  "                                                TcHmi.Symbol.writeEx('%i%RecipeErrorMsg%/i%', '', function () {});",
                  "",
                  "                                                // Delete the old recipe",
                  "                                                TcHmi.Server.RecipeManagement.deleteRecipe(",
                  "                                                    'Production::' + recipeNameOld,",
                  "                                                    '',",
                  "                                                    function (delResult) {",
                  "                                                        if (delResult.error === TcHmi.Errors.NONE) {",
                  "                                                            const delStatus = 'Old recipe deleted: ' + recipeNameOld;",
                  "                                                            TcHmi.Symbol.writeEx('%i%RecipeStatusMsg%/i%', delStatus, function () {});",
                  "                                                            TcHmi.Symbol.writeEx('%i%RecipeErrorMsg%/i%', '', function () {});",
                  "                                                        } else {",
                  "                                                            const delError = 'Deleting recipe failed: ' + (delResult.errorMessage || 'Unknown error');",
                  "                                                            TcHmi.Symbol.writeEx('%i%RecipeErrorMsg%/i%', delError, function () {});",
                  "                                                            TcHmi.Symbol.writeEx('%i%RecipeStatusMsg%/i%', '', function () {});",
                  "                                                        }",
                  "                                                    }",
                  "                                                );",
                  "                                            } else {",
                  "                                                const errMsg = 'Creating recipe failed: ' + (result.errorMessage || 'Unknown error');",
                  "                                                TcHmi.Symbol.writeEx('%i%RecipeErrorMsg%/i%', errMsg, function () {});",
                  "                                                TcHmi.Symbol.writeEx('%i%RecipeStatusMsg%/i%', '', function () {});",
                  "                                            }",
                  "                                        }",
                  "                                    );",
                  "                                } else {",
                  "                                    // Optional: add message if names are the same",
                  "                                    const msg = 'Recipe names are the same, no action taken.';",
                  "                                    TcHmi.Symbol.writeEx('%i%RecipeStatusMsg%/i%', msg, function () {});",
                  "                                    TcHmi.Symbol.writeEx('%i%RecipeErrorMsg%/i%', '', function () {});",
                  "                                }",
                  "                            } else {",
                  "                                const errMsg = 'Read new recipe name failed: ' + (dataNew.errorMessage || 'Unknown error');",
                  "                                TcHmi.Symbol.writeEx('%i%RecipeErrorMsg%/i%', errMsg, function () {});",
                  "                                TcHmi.Symbol.writeEx('%i%RecipeStatusMsg%/i%', '', function () {});",
                  "                            }",
                  "                        });",
                  "                    } else {",
                  "                        const errMsg = 'Read old recipe name failed: ' + (dataOld.errorMessage || 'Unknown error');",
                  "                        TcHmi.Symbol.writeEx('%i%RecipeErrorMsg%/i%', errMsg, function () {});",
                  "                        TcHmi.Symbol.writeEx('%i%RecipeStatusMsg%/i%', '', function () {});",
                  "                    }",
                  "                });",
                  "            });",
                  "",
                  "        } else {",
                  "            console.error('Read failed (datetime):', data.errorMessage);",
                  "        }",
                  "    }",
                  ");"
                ],
                "asyncWait": true,
                "waitMode": "Synchronous"
              }
            ]
          },
          {
            "caseValue": {
              "objectType": "StaticValue",
              "valueType": "tchmi:general#/definitions/INT",
              "value": 1
            },
            "actions": [
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%s%ADS.PLC1.Recipes.Cleaning.sName%/s%",
                "value": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:general#/definitions/STRING%2880%29",
                  "symbolExpression": "%i%RecipeNameNew%/i%"
                },
                "asyncWait": true
              },
              {
                "objectType": "JavaScript",
                "active": true,
                "sourceLines": [
                  "// Read current PLC date-time and write user + time info into recipe structure",
                  "TcHmi.Symbol.readEx2(",
                  "    '%s%ADS.PLC1.GV.stTime.sDateTime%/s%',",
                  "    function (data) {",
                  "        if (data.error === TcHmi.Errors.NONE) {",
                  "            let datetime = data.value;",
                  "",
                  "            // Extract current user name from HMI",
                  "            let user = TcHmi.Server.getCurrentUser();",
                  "",
                  "            // Define what to write to PLC",
                  "            const valuesToWrite = [",
                  "                { symbol: '%s%ADS.PLC1.Recipes.Cleaning.stInfo.sUserEdited%/s%', value: user },",
                  "                { symbol: '%s%ADS.PLC1.Recipes.Cleaning.stInfo.sTimeEdited%/s%', value: datetime }",
                  "            ];",
                  "",
                  "            // Function to write one-by-one",
                  "            function writeSymbols(index = 0, onComplete) {",
                  "                if (index >= valuesToWrite.length) {",
                  "                    onComplete && onComplete(); // Call callback when all done",
                  "                    return;",
                  "                }",
                  "",
                  "                const { symbol, value } = valuesToWrite[index];",
                  "                TcHmi.Symbol.writeEx(symbol, value, function (result) {",
                  "                    if (result.error === TcHmi.Errors.NONE) {",
                  "                        writeSymbols(index + 1, onComplete);",
                  "                    } else {",
                  "                        console.error(`Write failed at ${symbol}:`, result.errorMessage);",
                  "                    }",
                  "                });",
                  "            }",
                  "",
                  "            // Start writing, and on complete, read recipe name and create recipe",
                  "            writeSymbols(0, function () {",
                  "                TcHmi.Symbol.readEx2('%i%RecipeNameCurr%/i%', function (dataOld) {",
                  "                    if (dataOld.error === TcHmi.Errors.NONE) {",
                  "                        let recipeNameOld = dataOld.value;",
                  "",
                  "                        TcHmi.Symbol.readEx2('%s%ADS.PLC1.Recipes.Cleaning.sName%/s%', function (dataNew) {",
                  "                            if (dataNew.error === TcHmi.Errors.NONE) {",
                  "                                let recipeNameNew = dataNew.value;",
                  "",
                  "                                if (recipeNameOld !== recipeNameNew) {",
                  "                                    TcHmi.Server.RecipeManagement.teachAsNewRecipe(",
                  "                                        'Cleaning::' + recipeNameOld,",
                  "                                        '',",
                  "                                        'Cleaning::' + recipeNameNew,",
                  "                                        '',",
                  "                                        function (result) {",
                  "                                            if (result.error === TcHmi.Errors.NONE) {",
                  "                                                const status = 'Recipe created successfully: ' + recipeNameNew;",
                  "                                                TcHmi.Symbol.writeEx('%i%RecipeStatusMsg%/i%', status, function () {});",
                  "                                                TcHmi.Symbol.writeEx('%i%RecipeErrorMsg%/i%', '', function () {});",
                  "",
                  "                                                // Delete the old recipe",
                  "                                                TcHmi.Server.RecipeManagement.deleteRecipe(",
                  "                                                    'Cleaning::' + recipeNameOld,",
                  "                                                    '',",
                  "                                                    function (delResult) {",
                  "                                                        if (delResult.error === TcHmi.Errors.NONE) {",
                  "                                                            const delStatus = 'Old recipe deleted: ' + recipeNameOld;",
                  "                                                            TcHmi.Symbol.writeEx('%i%RecipeStatusMsg%/i%', delStatus, function () {});",
                  "                                                            TcHmi.Symbol.writeEx('%i%RecipeErrorMsg%/i%', '', function () {});",
                  "                                                        } else {",
                  "                                                            const delError = 'Deleting recipe failed: ' + (delResult.errorMessage || 'Unknown error');",
                  "                                                            TcHmi.Symbol.writeEx('%i%RecipeErrorMsg%/i%', delError, function () {});",
                  "                                                            TcHmi.Symbol.writeEx('%i%RecipeStatusMsg%/i%', '', function () {});",
                  "                                                        }",
                  "                                                    }",
                  "                                                );",
                  "                                            } else {",
                  "                                                const errMsg = 'Creating recipe failed: ' + (result.errorMessage || 'Unknown error');",
                  "                                                TcHmi.Symbol.writeEx('%i%RecipeErrorMsg%/i%', errMsg, function () {});",
                  "                                                TcHmi.Symbol.writeEx('%i%RecipeStatusMsg%/i%', '', function () {});",
                  "                                            }",
                  "                                        }",
                  "                                    );",
                  "                                } else {",
                  "                                    // Optional: add message if names are the same",
                  "                                    const msg = 'Recipe names are the same, no action taken.';",
                  "                                    TcHmi.Symbol.writeEx('%i%RecipeStatusMsg%/i%', msg, function () {});",
                  "                                    TcHmi.Symbol.writeEx('%i%RecipeErrorMsg%/i%', '', function () {});",
                  "                                }",
                  "                            } else {",
                  "                                const errMsg = 'Read new recipe name failed: ' + (dataNew.errorMessage || 'Unknown error');",
                  "                                TcHmi.Symbol.writeEx('%i%RecipeErrorMsg%/i%', errMsg, function () {});",
                  "                                TcHmi.Symbol.writeEx('%i%RecipeStatusMsg%/i%', '', function () {});",
                  "                            }",
                  "                        });",
                  "                    } else {",
                  "                        const errMsg = 'Read old recipe name failed: ' + (dataOld.errorMessage || 'Unknown error');",
                  "                        TcHmi.Symbol.writeEx('%i%RecipeErrorMsg%/i%', errMsg, function () {});",
                  "                        TcHmi.Symbol.writeEx('%i%RecipeStatusMsg%/i%', '', function () {});",
                  "                    }",
                  "                });",
                  "            });",
                  "",
                  "        } else {",
                  "            console.error('Read failed (datetime):', data.errorMessage);",
                  "        }",
                  "    }",
                  ");"
                ],
                "asyncWait": true,
                "waitMode": "Synchronous"
              }
            ]
          }
        ],
        "asyncWait": true
      },
      {
        "objectType": "ControlApiFunction",
        "active": true,
        "control": "TcHmiPopup_Recipe_Prod",
        "fn": "close",
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>
<div id="TcHmiTextblock_357" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="30" data-tchmi-height-unit="px" data-tchmi-left="0" data-tchmi-left-unit="px" data-tchmi-text="Recipe name" data-tchmi-top="15" data-tchmi-top-unit="px" data-tchmi-width="400" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-font-size="17">
<script data-tchmi-target-attribute="data-tchmi-content-padding" type="application/json">
{
  "left": 15,
  "right": 0,
  "top": 0,
  "bottom": 0,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>
</div>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">[
  {
    "event": "%ctx%owner::Id|EventRegistrationMode=Resolve%/ctx%.onAttached",
    "actions": [
      {
        "objectType": "WriteToSymbol",
        "active": true,
        "symbolExpression": "%i%RecipeNameNew%/i%",
        "value": {
          "objectType": "StaticValue",
          "valueType": "tchmi:general#/definitions/String",
          "value": null
        },
        "asyncWait": true
      }
    ]
  }
]</script>

<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(247, 247, 247, 1)"
}
</script>
</div>