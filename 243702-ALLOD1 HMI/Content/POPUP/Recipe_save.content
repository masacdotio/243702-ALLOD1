<div id="Recipe_save_1" data-tchmi-type="TcHmi.Controls.System.TcHmiContent" data-tchmi-top="0" data-tchmi-left="0" data-tchmi-width="400" data-tchmi-height="200" data-tchmi-creator-locked="True">


<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(247, 247, 247, 1)"
}
</script>
<div id="TcHmiTextblock_355" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="100" data-tchmi-height-unit="px" data-tchmi-left="0" data-tchmi-left-unit="px" data-tchmi-text="%l%AreYouSure%/l%" data-tchmi-top="0" data-tchmi-top-unit="px" data-tchmi-width="400" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Center" data-tchmi-text-font-size="20">
</div>
<div id="TcHmiButton_12" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="60" data-tchmi-height-unit="px" data-tchmi-left="100" data-tchmi-left-unit="px" data-tchmi-text="%l%Yes%/l%" data-tchmi-top="125" data-tchmi-top-unit="px" data-tchmi-width="200" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-icon-width="35" data-tchmi-icon-horizontal-alignment="Left" data-tchmi-text-font-size="17" data-tchmi-icon="Images/Icons/Icon_check.png" data-tchmi-text-font-weight="Bold">
<script data-tchmi-target-attribute="data-tchmi-border-radius" type="application/json">
{
  "topLeft": 15.0,
  "topRight": 15.0,
  "bottomLeft": 15.0,
  "bottomRight": 15.0,
  "topLeftUnit": "px",
  "topRightUnit": "px",
  "bottomLeftUnit": "px",
  "bottomRightUnit": "px"
}
</script>







<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(229, 229, 229, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-icon-padding" type="application/json">
{
  "left": 10,
  "right": 0,
  "top": 0,
  "bottom": 0,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-text-padding" type="application/json">
{
  "left": 10,
  "right": 0,
  "top": 0,
  "bottom": 0,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>



<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%ctx%owner::Id|EventRegistrationMode=Resolve%/ctx%.onPressed",
    "actions": [
      {
        "objectType": "SwitchCase",
        "active": true,
        "compare": {
          "objectType": "Symbol",
          "valueType": "tchmi:general#/definitions/INT",
          "symbolExpression": "%i%RecipeType%/i%"
        },
        "cases": [
          {
            "caseValue": {
              "objectType": "StaticValue",
              "valueType": "tchmi:general#/definitions/INT",
              "value": 0
            },
            "actions": [
              {
                "objectType": "JavaScript",
                "active": true,
                "sourceLines": [
                  "// First, read current iVersion from PLC",
                  "TcHmi.Symbol.readEx2(",
                  "    '%s%ADS.PLC1.Recipes.Production.stInfo.iVersion%/s%',",
                  "    function (versionData) {",
                  "        if (versionData.error === TcHmi.Errors.NONE) {",
                  "            let currentVersion = versionData.value;",
                  "            let newVersion = currentVersion + 1;",
                  "",
                  "            // Now read the current PLC date-time",
                  "            TcHmi.Symbol.readEx2(",
                  "                '%s%ADS.PLC1.GV.stTime.sDateTime%/s%',",
                  "                function (timeData) {",
                  "                    if (timeData.error === TcHmi.Errors.NONE) {",
                  "                        let datetime = timeData.value;",
                  "",
                  "                        // Get current user",
                  "                        let user = TcHmi.Server.getCurrentUser();",
                  "                 ",
                  "",
                  "                        // Define what to write",
                  "                        const valuesToWrite = [",
                  "                            { symbol: '%s%ADS.PLC1.Recipes.Production.stInfo.sUserEdited%/s%', value: user },",
                  "                            { symbol: '%s%ADS.PLC1.Recipes.Production.stInfo.sTimeEdited%/s%', value: datetime },",
                  "                            { symbol: '%s%ADS.PLC1.Recipes.Production.stInfo.iVersion%/s%', value: newVersion }",
                  "                        ];",
                  "",
                  "                        // Sequential write function",
                  "                        function writeSymbols(index = 0, onComplete) {",
                  "                            if (index >= valuesToWrite.length) {",
                  "                                onComplete && onComplete();",
                  "                                return;",
                  "                            }",
                  "",
                  "                            const { symbol, value } = valuesToWrite[index];",
                  "                            TcHmi.Symbol.writeEx(symbol, value, function (result) {",
                  "                                if (result.error === TcHmi.Errors.NONE) {",
                  "                                    writeSymbols(index + 1, onComplete);",
                  "                                } else {",
                  "                                    console.error(`Write failed at ${symbol}:`, result.errorMessage);",
                  "                                }",
                  "                            });",
                  "                        }",
                  "",
                  "                        // After writing, call teach",
                  "                        writeSymbols(0, function () {",
                  "                            TcHmi.Symbol.readEx2(",
                  "                                '%s%ADS.PLC1.Recipes.Production.sName%/s%',",
                  "                                function (nameData) {",
                  "                                    if (nameData.error === TcHmi.Errors.NONE) {",
                  "                                        let recipeName = nameData.value;",
                  "",
                  "                                        TcHmi.Server.RecipeManagement.teach(",
                  "                                            'Production::' + recipeName,",
                  "                                            '',",
                  "                                            function (result) {",
                  "                                                if (result.error === TcHmi.Errors.NONE) {",
                  "                                                    const Status = 'Recipe saved successfully: ' + recipeName;",
                  "                                                    TcHmi.Symbol.writeEx('%i%RecipeStatusMsg%/i%', Status, function () {});",
                  "                                                    TcHmi.Symbol.writeEx('%i%RecipeErrorMsg%/i%', '', function () {});",
                  "                                                } else {",
                  "                                                    const errMsg = 'Saving recipe failed: ' + result.errorMessage;",
                  "                                                    TcHmi.Symbol.writeEx('%i%RecipeErrorMsg%/i%', errMsg, function () {});",
                  "                                                    TcHmi.Symbol.writeEx('%i%RecipeStatusMsg%/i%', '', function () {});",
                  "                                                }",
                  "                                            }",
                  "                                        );",
                  "                                    } else {",
                  "                                        console.error('Read failed (recipe name):', nameData.errorMessage);",
                  "                                    }",
                  "                                }",
                  "                            );",
                  "                        });",
                  "",
                  "                    } else {",
                  "                        console.error('Read failed (datetime):', timeData.errorMessage);",
                  "                    }",
                  "                }",
                  "            );",
                  "",
                  "        } else {",
                  "            console.error('Read failed (iVersion):', versionData.errorMessage);",
                  "        }",
                  "    }",
                  ");"
                ],
                "asyncWait": true,
                "waitMode": "Synchronous"
              }
            ]
          },
          {
            "caseValue": {
              "objectType": "StaticValue",
              "valueType": "tchmi:general#/definitions/INT",
              "value": 1
            },
            "actions": [
              {
                "objectType": "JavaScript",
                "active": true,
                "sourceLines": [
                  "// First, read current iVersion from PLC",
                  "TcHmi.Symbol.readEx2(",
                  "    '%s%ADS.PLC1.Recipes.Cleaning.stInfo.iVersion%/s%',",
                  "    function (versionData) {",
                  "        if (versionData.error === TcHmi.Errors.NONE) {",
                  "            let currentVersion = versionData.value;",
                  "            let newVersion = currentVersion + 1;",
                  "",
                  "            // Now read the current PLC date-time",
                  "            TcHmi.Symbol.readEx2(",
                  "                '%s%ADS.PLC1.GV.stTime.sDateTime%/s%',",
                  "                function (timeData) {",
                  "                    if (timeData.error === TcHmi.Errors.NONE) {",
                  "                        let datetime = timeData.value;",
                  "",
                  "                        // Get current user",
                  "                        let user = TcHmi.Server.getCurrentUser();",
                  "                 ",
                  "",
                  "                        // Define what to write",
                  "                        const valuesToWrite = [",
                  "                            { symbol: '%s%ADS.PLC1.Recipes.Cleaning.stInfo.sUserEdited%/s%', value: user },",
                  "                            { symbol: '%s%ADS.PLC1.Recipes.Cleaning.stInfo.sTimeEdited%/s%', value: datetime },",
                  "                            { symbol: '%s%ADS.PLC1.Recipes.Cleaning.stInfo.iVersion%/s%', value: newVersion }",
                  "                        ];",
                  "",
                  "                        // Sequential write function",
                  "                        function writeSymbols(index = 0, onComplete) {",
                  "                            if (index >= valuesToWrite.length) {",
                  "                                onComplete && onComplete();",
                  "                                return;",
                  "                            }",
                  "",
                  "                            const { symbol, value } = valuesToWrite[index];",
                  "                            TcHmi.Symbol.writeEx(symbol, value, function (result) {",
                  "                                if (result.error === TcHmi.Errors.NONE) {",
                  "                                    writeSymbols(index + 1, onComplete);",
                  "                                } else {",
                  "                                    console.error(`Write failed at ${symbol}:`, result.errorMessage);",
                  "                                }",
                  "                            });",
                  "                        }",
                  "",
                  "                        // After writing, call teach",
                  "                        writeSymbols(0, function () {",
                  "                            TcHmi.Symbol.readEx2(",
                  "                                '%s%ADS.PLC1.Recipes.Cleaning.sName%/s%',",
                  "                                function (nameData) {",
                  "                                    if (nameData.error === TcHmi.Errors.NONE) {",
                  "                                        let recipeName = nameData.value;",
                  "",
                  "                                        TcHmi.Server.RecipeManagement.teach(",
                  "                                            'Cleaning::' + recipeName,",
                  "                                            '',",
                  "                                            function (result) {",
                  "                                                if (result.error === TcHmi.Errors.NONE) {",
                  "                                                    const Status = 'Recipe saved successfully: ' + recipeName;",
                  "                                                    TcHmi.Symbol.writeEx('%i%RecipeStatusMsg%/i%', Status, function () {});",
                  "                                                    TcHmi.Symbol.writeEx('%i%RecipeErrorMsg%/i%', '', function () {});",
                  "                                                } else {",
                  "                                                    const errMsg = 'Saving recipe failed: ' + result.errorMessage;",
                  "                                                    TcHmi.Symbol.writeEx('%i%RecipeErrorMsg%/i%', errMsg, function () {});",
                  "                                                    TcHmi.Symbol.writeEx('%i%RecipeStatusMsg%/i%', '', function () {});",
                  "                                                }",
                  "                                            }",
                  "                                        );",
                  "                                    } else {",
                  "                                        console.error('Read failed (recipe name):', nameData.errorMessage);",
                  "                                    }",
                  "                                }",
                  "                            );",
                  "                        });",
                  "",
                  "                    } else {",
                  "                        console.error('Read failed (datetime):', timeData.errorMessage);",
                  "                    }",
                  "                }",
                  "            );",
                  "",
                  "        } else {",
                  "            console.error('Read failed (iVersion):', versionData.errorMessage);",
                  "        }",
                  "    }",
                  ");"
                ],
                "asyncWait": true,
                "waitMode": "Synchronous"
              }
            ]
          }
        ],
        "asyncWait": true
      },
      {
        "objectType": "ControlApiFunction",
        "active": true,
        "control": "TcHmiPopup_Recipe_Prod",
        "fn": "close",
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>
</div>