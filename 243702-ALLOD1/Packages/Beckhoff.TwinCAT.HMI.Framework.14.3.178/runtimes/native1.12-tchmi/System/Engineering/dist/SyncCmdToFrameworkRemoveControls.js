import{SyncCmdToFramework,registerCommand}from"./SyncCmdToFramework.js";import{SyncCmdToCreatorSyncControls}from"./SyncCmdToCreatorSyncControls.js";TCHMI_DESIGNER||TcHmi.Log.errorEx(`Internal error: The file "${import.meta.url}" is restricted to use within the designer.`);export class SyncCmdToFrameworkRemoveControls extends SyncCmdToFramework{constructor(cmd){super(cmd)}run(){if(!TCHMI_DESIGNER)return;if(tchmi_path(this.__cmd.targetPartial)!==TCHMI_TARGET_PARTIAL)return;const deletedChildControls=new Set;for(const controlId of this.__cmd.controls){if(deletedChildControls.has(controlId))continue;const tco=TcHmi.Controls.get(controlId);if(!tco){TcHmi.Log.error(`[Source=Framework, Module=TcHmi.System.Engineering.SyncCmdToFrameworkRemoveControls] Failed to remove control "${controlId}": Not found in control cache.\n`);break}const updateParents=ctrl=>{const parentCtrl=ctrl.getParent();if(!parentCtrl)return;const parentPcElem=parentCtrl.getPcElement(),deletedChildInPc=parentPcElem?.[0].querySelector("#"+CSS.escape(controlId));deletedChildInPc?.remove(),updateParents(parentCtrl)};updateParents(tco),TcHmi.Engineering.ErrorPane.remove(controlId+"requiredAttributeTouched");for(const children of tco.getElement()[0].querySelectorAll("div[id][data-tchmi-type]"))deletedChildControls.add(children.id);tco.__getKeepAlive()&&tco.__setKeepAlive(!1),tco.destroy()}new SyncCmdToCreatorSyncControls({name:"SyncControls",controls:[],frameworkType:TCHMI_DESIGNER?"Designer":"LiveView",targetPartial:TCHMI_TARGET_PARTIAL,replyTo:null}).send()}}SyncCmdToFrameworkRemoveControls.supportedCommand="RemoveControls",registerCommand(SyncCmdToFrameworkRemoveControls);