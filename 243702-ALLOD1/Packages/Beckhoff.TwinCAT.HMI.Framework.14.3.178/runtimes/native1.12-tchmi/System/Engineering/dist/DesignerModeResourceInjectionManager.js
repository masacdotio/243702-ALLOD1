TCHMI_ENGINEERING||TcHmi.Log.errorEx(`Internal error: The file "${import.meta.url}" is restricted to use within the designer or live view.`);export class DesignerModeResourceInjectionManager{constructor(){}injectPackageResources(packages,callback){let destroyOnControlsRegistered,destroyOnFunctionRegistered,pending=0,mPackages=new Map,modControls={map:new Map,urlByName:new Map,array:[]},modFunctions={map:new Map,array:[]},mapControlDescriptionByPath=new Map,mapFunctionDescriptionByPath=new Map,asyncFinalizeStage4=()=>{pending>0||(pending=0,destroyOnControlsRegistered&&(destroyOnControlsRegistered(),destroyOnControlsRegistered=null),destroyOnFunctionRegistered&&(destroyOnFunctionRegistered(),destroyOnFunctionRegistered=null),TcHmi.System.Services.typeManager.doForceSchemaDefinitions((data=>{TcHmi.System.Services.controlManager.resolveDescriptionInheritation(),TcHmi.System.Services.themeManager.processActiveTheme(),TcHmi.System.Services.localizationManager.processLocale("en",{level:TcHmi.Locale.Level.Engineering}),TcHmi.System.Services.localizationManager.processLocale(TcHmi.System.Services.localizationManager.getLocale(),{level:TcHmi.Locale.Level.Application}),TcHmi.Callback.callSafeEx(callback,this,{error:TcHmi.Errors.NONE})})))},asyncFinalizeStage3=()=>{if(!(pending>0)){pending=0;for(const module of modControls.array){if(!module.description||!module.package||!module.manifestData)return;if(module.description.template){let url=tchmi_path(module.package.basePath+"/"+module.manifestData.basePath+"/"+module.description.template),xhr=new XMLHttpRequest;xhr.open("GET",tchmi_encode_uri_components(url)+"?preventcache="+Math.random()),xhr.addEventListener("load",(_event=>{pending--,200===xhr.status?(TcHmi.System.Data.Caches.templateMarkupCache.set(url,xhr.responseText),asyncFinalizeStage4()):asyncFinalizeStage4()})),xhr.addEventListener("error",(_event=>{pending--,asyncFinalizeStage4()})),pending++,xhr.send()}if(module.description.languages){const qname=TcHmi.System.resolveQualifiedName(module.description.name,module.description.namespace);for(const[key,languageEntry]of Object.entries(module.description.languages))if(Array.isArray(languageEntry)){const sanitizedLanguageArray=[];for(const subEntry of languageEntry)sanitizedLanguageArray.push(tchmi_path(TcHmi.Environment.getControlBasePath(qname)+"/"+subEntry));TcHmi.System.Services.localizationManager.registerLocalizationFile("TcHmi.System.Localization.Control<"+qname+">",key,sanitizedLanguageArray)}else TcHmi.System.Services.localizationManager.registerLocalizationFile("TcHmi.System.Localization.Control<"+qname+">",key,tchmi_path(TcHmi.Environment.getControlBasePath(qname)+"/"+languageEntry))}}asyncFinalizeStage4()}},asyncFinalizeStage2=()=>{if(pending>0)return;pending=0;let jsincludes=[],packagesSorted=[];mPackages.forEach(((pkg,name)=>{packagesSorted.push(pkg)})),packagesSorted.sort(((a,b)=>{if(a&&a.manifest&&a.manifest.modules)for(let i=0,ii=a.manifest.modules.length;i<ii;i++){let module=a.manifest.modules[i];if((!module||"Package"===module.type)&&module.nugetId===b.name)return-1}if(b&&b.manifest&&b.manifest.modules)for(let i=0,ii=b.manifest.modules.length;i<ii;i++){let module=b.manifest.modules[i];if((!module||"Package"===module.type)&&module.nugetId===a.name)return 1}return 0}));for(let i=0,ii=packagesSorted.length;i<ii;i++){let pkg=packagesSorted[i];if(!pkg)continue;let manifest=pkg.manifest;if(!manifest)continue;let manifestModules=manifest.modules;if(manifestModules)for(let j=0,jj=manifestModules.length;j<jj;j++){let manifestModule=manifestModules[j];if("Control"===manifestModule.type){let descrUrl=tchmi_path(pkg.basePath+"/"+manifestModule.basePath+"/"+manifestModule.descriptionFile),descr=mapControlDescriptionByPath.get(descrUrl);if(!descr)continue;let module={error:TcHmi.Errors.NONE,manifestData:manifestModule,package:pkg,description:descr,descriptionExpanded:{...tchmi_clone_object(descr),inheritationResolved:!1,inheritedTypes:[],inheritedAttributes:[],inheritedAttributesNameMap:new Map,inheritedAttributesPropertyNameMap:new Map,inheritedAttributesPropertyGetterNameMap:new Map,inheritedAttributesPropertySetterNameMap:new Map,inheritedAccess:[],inheritedEvents:[],inheritedFunctions:[],inheritedLanguages:{}}},name=descr.name;if(modControls.array.push(module),1===module.package?.manifest.apiVersion){let qname=TcHmi.System.resolveQualifiedName(descr.name,descr.namespace);modControls.map.has(name)?(modControls.map.set(name,{error:TcHmi.Errors.E_NOT_UNIQUE,errorDetails:{code:TcHmi.Errors.E_NOT_UNIQUE,message:TcHmi.Errors[TcHmi.Errors.E_NOT_UNIQUE]}}),modControls.urlByName.delete(name)):(modControls.map.set(name,module),modControls.urlByName.set(name,descrUrl)),modControls.map.has(qname)?(modControls.map.set(qname,{error:TcHmi.Errors.E_NOT_UNIQUE,errorDetails:{code:TcHmi.Errors.E_NOT_UNIQUE,message:TcHmi.Errors[TcHmi.Errors.E_NOT_UNIQUE]}}),modControls.urlByName.delete(qname)):(modControls.map.set(qname,module),modControls.urlByName.set(qname,descrUrl))}else modControls.map.has(name)?(modControls.map.set(name,{error:TcHmi.Errors.E_NOT_UNIQUE,errorDetails:{code:TcHmi.Errors.E_NOT_UNIQUE,message:TcHmi.Errors[TcHmi.Errors.E_NOT_UNIQUE]}}),modControls.urlByName.delete(name)):(modControls.map.set(name,module),modControls.urlByName.set(name,descrUrl));TcHmi.System.Services.themeManager.registerControlThemeFiles(descr);for(let k=0,kk=descr.dependencyFiles.length;k<kk;k++){let dependencyFile=descr.dependencyFiles[k];if(dependencyFile&&(dependencyFile.type&&"JAVASCRIPT"===dependencyFile.type.toUpperCase())){let jsinclude=tchmi_path(pkg.basePath+"/"+manifestModule.basePath+"/"+dependencyFile.name);if(jsincludes.includes(jsinclude))continue;jsincludes.push(jsinclude)}}}else if("Function"===manifestModule.type){let descrUrl=tchmi_path(pkg.basePath+"/"+manifestModule.basePath+"/"+manifestModule.descriptionFile),descr=mapFunctionDescriptionByPath.get(descrUrl);if(!descr)continue;let module={error:TcHmi.Errors.NONE,manifestData:manifestModule,package:pkg,description:descr};modFunctions.array.push(module),modFunctions.map.set(descr.function.name,module);let name=descr.function.name;if(1===pkg.manifest.apiVersion){let qname=TcHmi.System.resolveQualifiedName(descr.function.name,"Namespace");if(modFunctions.map.has(name)?modFunctions.map.set(name,{error:TcHmi.Errors.E_NOT_UNIQUE,errorDetails:{code:TcHmi.Errors.E_NOT_UNIQUE,message:TcHmi.Errors[TcHmi.Errors.E_NOT_UNIQUE]}}):modFunctions.map.set(name,module),modFunctions.map.has(qname)?modFunctions.map.set(qname,{error:TcHmi.Errors.E_NOT_UNIQUE,errorDetails:{code:TcHmi.Errors.E_NOT_UNIQUE,message:TcHmi.Errors[TcHmi.Errors.E_NOT_UNIQUE]}}):modFunctions.map.set(qname,module),descr.languages&&module.package&&module.manifestData)for(const[key,languageEntry]of Object.entries(descr.languages))if(Array.isArray(languageEntry))for(const subEntry of languageEntry)TcHmi.System.Services.localizationManager.registerLocalizationFile("TcHmi.System.Localization.Function<"+qname+">",key,tchmi_path(module.package.basePath+"/"+module.manifestData.basePath+"/"+subEntry));else TcHmi.System.Services.localizationManager.registerLocalizationFile("TcHmi.System.Localization.Function<"+qname+">",key,tchmi_path(module.package.basePath+"/"+module.manifestData.basePath+"/"+languageEntry))}else modFunctions.map.has(name)?modFunctions.map.set(name,{error:TcHmi.Errors.E_NOT_UNIQUE,errorDetails:{code:TcHmi.Errors.E_NOT_UNIQUE,message:TcHmi.Errors[TcHmi.Errors.E_NOT_UNIQUE]}}):modFunctions.map.set(name,module);for(let k=0,kk=descr.dependencyFiles.length;k<kk;k++){let dependencyFile=descr.dependencyFiles[k];if(dependencyFile&&(dependencyFile.type&&"JAVASCRIPT"===dependencyFile.type.toUpperCase())){let include=tchmi_path(pkg.basePath+"/"+manifestModule.basePath+"/"+dependencyFile.name);if(jsincludes.includes(include))continue;jsincludes.push(include)}}}else if("Resource"===manifestModule.type&&(manifestModule.path.toLowerCase().endsWith(".js")||manifestModule.path.toLowerCase().endsWith(".mjs"))){let jsinclude=tchmi_path(pkg.basePath+"/"+manifestModule.path);if(jsincludes.includes(jsinclude))continue;jsincludes.push(jsinclude)}}}let fragment=document.createDocumentFragment();destroyOnControlsRegistered=TcHmi.EventProvider.register("System.onControlRegistered",((_event,data)=>{if(data.error!==TcHmi.Errors.NONE||!data.name)return;let name=data.name,qname=TcHmi.System.resolveQualifiedName(data.name,data.namespace);const modControlName=modControls.map.get(name);if(1===modControlName?.package?.manifest.apiVersion){let modControlQualifiedName=modControls.map.get(qname);if(TcHmi.System.Data.Modules.controls.array.push(modControlName),modControlName&&modControlName.error===TcHmi.Errors.NONE)if(modControlName.reg=data,TcHmi.System.Data.Modules.controls.map.has(name)){TcHmi.System.Data.Modules.controls.map.set(name,{error:TcHmi.Errors.E_NOT_UNIQUE,errorDetails:{code:TcHmi.Errors.E_NOT_UNIQUE,message:TcHmi.Errors[TcHmi.Errors.E_NOT_UNIQUE]}});let url=modControls.urlByName.get(name);url&&TcHmi.System.Data.Modules.controls.urlMap.delete(url)}else{TcHmi.System.Data.Modules.controls.map.set(name,modControlName);let url=modControls.urlByName.get(name);url&&TcHmi.System.Data.Modules.controls.urlMap.set(url,modControlName)}else TcHmi.System.Data.Modules.controls.map.set(name,{error:modControlName.error});if(modControlQualifiedName)if(modControlQualifiedName.error===TcHmi.Errors.NONE)if(modControlQualifiedName.reg=data,TcHmi.System.Data.Modules.controls.map.has(qname)){TcHmi.System.Data.Modules.controls.map.set(qname,{error:TcHmi.Errors.E_NOT_UNIQUE,errorDetails:{code:TcHmi.Errors.E_NOT_UNIQUE,message:TcHmi.Errors[TcHmi.Errors.E_NOT_UNIQUE]}});let url=modControls.urlByName.get(qname);url&&TcHmi.System.Data.Modules.controls.urlMap.delete(url)}else{TcHmi.System.Data.Modules.controls.map.set(qname,modControlQualifiedName);let url=modControls.urlByName.get(qname);url&&TcHmi.System.Data.Modules.controls.urlMap.set(url,modControlQualifiedName)}else TcHmi.System.Data.Modules.controls.map.set(name,{error:modControlQualifiedName.error});else;}else if(modControlName)if(modControlName.error===TcHmi.Errors.NONE){if(modControlName.reg=data,modControlName.reg?.directory&&modControlName.reg.template){let cleanTemplatePath=tchmi_path(modControlName.reg.template),cleanTemplateDirectory=tchmi_path(modControlName.reg.directory);if(!cleanTemplatePath.includes(cleanTemplateDirectory)&&modControlName.description&&modControlName.descriptionExpanded){let cleanRelativeTemplatePath=tchmi_path(cleanTemplatePath.replace(cleanTemplateDirectory,""));modControlName.description.template=cleanRelativeTemplatePath,modControlName.descriptionExpanded.template=cleanRelativeTemplatePath}}TcHmi.System.Data.Modules.controls.map.has(name)?TcHmi.System.Data.Modules.controls.map.set(name,{error:TcHmi.Errors.E_NOT_UNIQUE,errorDetails:{code:TcHmi.Errors.E_NOT_UNIQUE,message:TcHmi.Errors[TcHmi.Errors.E_NOT_UNIQUE]}}):TcHmi.System.Data.Modules.controls.map.set(name,modControlName)}else TcHmi.System.Data.Modules.controls.map.set(name,{error:modControlName.error})})),destroyOnFunctionRegistered=TcHmi.EventProvider.register("System.onFunctionRegistered",((_event,data)=>{let name=data.name,qname=TcHmi.System.resolveQualifiedName(data.name,data.namespace),modFunctionName=modFunctions.map.get(name);if(modFunctionName&&modFunctionName.package)if(1===modFunctionName.package.manifest.apiVersion){let modFunctionQualifiedName=modFunctions.map.get(qname);modFunctionName&&modFunctionName.error===TcHmi.Errors.NONE?(modFunctionName.reg=data,TcHmi.System.Data.Modules.functions.map.has(name)?TcHmi.System.Data.Modules.functions.map.set(name,{error:TcHmi.Errors.E_NOT_UNIQUE,errorDetails:{code:TcHmi.Errors.E_NOT_UNIQUE,message:TcHmi.Errors[TcHmi.Errors.E_NOT_UNIQUE]}}):TcHmi.System.Data.Modules.functions.map.set(name,modFunctionName)):TcHmi.System.Data.Modules.functions.map.set(name,{error:modFunctionName.error}),modFunctionQualifiedName&&(modFunctionQualifiedName.error===TcHmi.Errors.NONE?TcHmi.System.Data.Modules.functions.map.has(qname)?TcHmi.System.Data.Modules.functions.map.set(qname,{error:TcHmi.Errors.E_NOT_UNIQUE,errorDetails:{code:TcHmi.Errors.E_NOT_UNIQUE,message:TcHmi.Errors[TcHmi.Errors.E_NOT_UNIQUE]}}):TcHmi.System.Data.Modules.functions.map.set(qname,modFunctionQualifiedName):TcHmi.System.Data.Modules.functions.map.set(name,{error:modFunctionQualifiedName.error}))}else modFunctionName&&modFunctionName.error===TcHmi.Errors.NONE?(modFunctionName.reg=data,TcHmi.System.Data.Modules.functions.map.has(name)?TcHmi.System.Data.Modules.functions.map.set(name,{error:TcHmi.Errors.E_NOT_UNIQUE,errorDetails:{code:TcHmi.Errors.E_NOT_UNIQUE,message:TcHmi.Errors[TcHmi.Errors.E_NOT_UNIQUE]}}):TcHmi.System.Data.Modules.functions.map.set(name,modFunctionName)):TcHmi.System.Data.Modules.functions.map.set(name,{error:modFunctionName.error});else TcHmi.Log.error("[Source=Framework, Module=TcHmi.System.Engineering.DesignerModeResourceInjectionManager] Internal error. Did not find function module information.")}));for(const include of jsincludes){pending++;let script=document.createElement("script");script.src=include,script.async=!1,script.onload=_event=>{pending--,asyncFinalizeStage3()},script.onerror=_event=>{pending--,asyncFinalizeStage3()},fragment.appendChild(script)}document.head.appendChild(fragment),asyncFinalizeStage3()},asyncFinalizeStage1=()=>{pending>0||(pending=0,mPackages.forEach(((pkg,name)=>{let manifest=pkg.manifest;if(manifest){let manifestModules=manifest.modules;if(manifestModules)for(const module of manifestModules)if("Control"===module?.type){let url=tchmi_path(pkg.basePath+"/"+module.basePath+"/"+module.descriptionFile),xhr=new XMLHttpRequest;xhr.open("GET",tchmi_encode_uri_components(url)+"?preventcache="+Math.random()),xhr.addEventListener("load",(_event=>{if(pending--,200===xhr.status){try{mapControlDescriptionByPath.set(url,JSON.parse(xhr.responseText))}catch(e){}asyncFinalizeStage2()}else asyncFinalizeStage2()})),xhr.addEventListener("error",(_event=>{pending--,asyncFinalizeStage2()})),pending++,xhr.send()}else if("Function"===module?.type){let url=tchmi_path(pkg.basePath+"/"+module.basePath+"/"+module.descriptionFile),xhr=new XMLHttpRequest;xhr.open("GET",tchmi_encode_uri_components(url)+"?preventcache="+Math.random()),xhr.addEventListener("load",(_event=>{if(pending--,200===xhr.status){try{mapFunctionDescriptionByPath.set(url,JSON.parse(xhr.responseText))}catch(e){}asyncFinalizeStage2()}else asyncFinalizeStage2()})),xhr.addEventListener("error",(_event=>{pending--,asyncFinalizeStage2()})),pending++,xhr.send()}}})),asyncFinalizeStage2())};for(const packageInfo of packages){if(!TcHmi.System.Data.packages.has(packageInfo.name)){let url=tchmi_path(packageInfo.basePath+"/Manifest.json"),xhr=new XMLHttpRequest;xhr.open("GET",tchmi_encode_uri_components(url)+"?preventcache="+Math.random()),xhr.addEventListener("load",(_event=>{if(pending--,200!==xhr.status)return void asyncFinalizeStage1();let manifest;try{manifest=JSON.parse(xhr.responseText)}catch(e){}if(!manifest)return void asyncFinalizeStage1();let pkg={name:packageInfo.name,basePath:packageInfo.basePath,manifest};mPackages.set(pkg.name,pkg),TcHmi.System.Data.packages.set(pkg.name,pkg),asyncFinalizeStage1()})),xhr.addEventListener("error",(_event=>{pending--,asyncFinalizeStage1()})),pending++,xhr.send()}asyncFinalizeStage1()}}injectProjectResources(){}}export const resourceInjectionManager=new DesignerModeResourceInjectionManager;