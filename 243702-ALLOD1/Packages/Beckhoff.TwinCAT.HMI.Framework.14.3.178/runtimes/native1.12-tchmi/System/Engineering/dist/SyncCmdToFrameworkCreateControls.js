var __runInitializers=this&&this.__runInitializers||function(thisArg,initializers,value){for(var useValue=arguments.length>2,i=0;i<initializers.length;i++)value=useValue?initializers[i].call(thisArg,value):initializers[i].call(thisArg);return useValue?value:void 0},__esDecorate=this&&this.__esDecorate||function(ctor,descriptorIn,decorators,contextIn,initializers,extraInitializers){function accept(f){if(void 0!==f&&"function"!=typeof f)throw new TypeError("Function expected");return f}for(var _,kind=contextIn.kind,key="getter"===kind?"get":"setter"===kind?"set":"value",target=!descriptorIn&&ctor?contextIn.static?ctor:ctor.prototype:null,descriptor=descriptorIn||(target?Object.getOwnPropertyDescriptor(target,contextIn.name):{}),done=!1,i=decorators.length-1;i>=0;i--){var context={};for(var p in contextIn)context[p]="access"===p?{}:contextIn[p];for(var p in contextIn.access)context.access[p]=contextIn.access[p];context.addInitializer=function(f){if(done)throw new TypeError("Cannot add initializers after decoration has completed");extraInitializers.push(accept(f||null))};var result=(0,decorators[i])("accessor"===kind?{get:descriptor.get,set:descriptor.set}:descriptor[key],context);if("accessor"===kind){if(void 0===result)continue;if(null===result||"object"!=typeof result)throw new TypeError("Object expected");(_=accept(result.get))&&(descriptor.get=_),(_=accept(result.set))&&(descriptor.set=_),(_=accept(result.init))&&initializers.unshift(_)}else(_=accept(result))&&("field"===kind?initializers.unshift(_):descriptor[key]=_)}target&&Object.defineProperty(target,contextIn.name,descriptor),done=!0};import{SyncCmdToFramework,registerCommand}from"./SyncCmdToFramework.js";import{designerModeManager}from"./DesignerModeManager.js";TCHMI_DESIGNER||TcHmi.Log.errorEx(`Internal error: The file "${import.meta.url}" is restricted to use within the designer.`);let SyncCmdToFrameworkCreateControls=(()=>{var _a;let ___onControlCreated_decorators,_classSuper=SyncCmdToFramework,_instanceExtraInitializers=[];return class extends _classSuper{static{const _metadata="function"==typeof Symbol&&Symbol.metadata?Object.create(_classSuper[Symbol.metadata]??null):void 0;___onControlCreated_decorators=[(_a=TcHmi).CallbackMethod.bind(_a)],__esDecorate(this,null,___onControlCreated_decorators,{kind:"method",name:"__onControlCreated",static:!1,private:!1,access:{has:obj=>"__onControlCreated"in obj,get:obj=>obj.__onControlCreated},metadata:_metadata},null,_instanceExtraInitializers),_metadata&&Object.defineProperty(this,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:_metadata})}constructor(cmd){super(cmd)}__controlsToSelect=(__runInitializers(this,_instanceExtraInitializers),[]);__createsPending=0;__onControlCreated(_data){if(this.__createsPending--,this.__createsPending<=0&&this.__controlsToSelect.length>0){designerModeManager.unselectEach(!0);for(const controlToSelect of this.__controlsToSelect)designerModeManager.select(controlToSelect,!0);designerModeManager.resyncSelectedControls()}}run(){if(!TCHMI_DESIGNER)return;if(tchmi_path(this.__cmd.targetPartial)===TCHMI_TARGET_PARTIAL)if(this.__cmd.controls)for(const control of this.__cmd.controls)if(control.controlHtml){this.__createsPending++;const parentControl=TcHmi.Controls.get(control.targetParentControl),pcElementInParent=parentControl?.getPcElement()[0].querySelector(`#${CSS.escape(control.controlId)}`);if(pcElementInParent&&pcElementInParent.outerHTML===control.controlHtml.replaceAll("\r\n","\n")&&TcHmi.Controls.get(control.controlId)){this.__onControlCreated({error:TcHmi.Errors.NONE});continue}control.select&&this.__controlsToSelect.push(control.controlId);const compileResult=designerModeManager.createControl(control.targetParentControl,control.domPosition,control.controlHtml,this.__onControlCreated);compileResult.error&&TcHmi.Log.errorEx(`[Source=Framework, Module=TcHmi.System.Engineering.SyncCmdToFrameworkCreateControls] compile of ${control.controlId} has failed:`,TcHmi.Log.buildMessage(compileResult.details))}else TcHmi.Log.error(`[Source=Framework, Module=TcHmi.System.Engineering.SyncCmdToFrameworkCreateControls] html content of ${control.controlId} is empty`),this.__result=TcHmi.Errors.E_PARAMETER_INVALID;else this.__result=TcHmi.Errors.E_PARAMETER_INVALID}}})();export{SyncCmdToFrameworkCreateControls};SyncCmdToFrameworkCreateControls.supportedCommand="CreateControls",registerCommand(SyncCmdToFrameworkCreateControls);