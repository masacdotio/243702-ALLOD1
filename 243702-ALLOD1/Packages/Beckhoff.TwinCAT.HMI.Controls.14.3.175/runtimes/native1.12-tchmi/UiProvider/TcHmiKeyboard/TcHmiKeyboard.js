"use strict";var TcHmi,__runInitializers=this&&this.__runInitializers||function(thisArg,initializers,value){for(var useValue=arguments.length>2,i=0;i<initializers.length;i++)value=useValue?initializers[i].call(thisArg,value):initializers[i].call(thisArg);return useValue?value:void 0},__esDecorate=this&&this.__esDecorate||function(ctor,descriptorIn,decorators,contextIn,initializers,extraInitializers){function accept(f){if(void 0!==f&&"function"!=typeof f)throw new TypeError("Function expected");return f}for(var _,kind=contextIn.kind,key="getter"===kind?"get":"setter"===kind?"set":"value",target=!descriptorIn&&ctor?contextIn.static?ctor:ctor.prototype:null,descriptor=descriptorIn||(target?Object.getOwnPropertyDescriptor(target,contextIn.name):{}),done=!1,i=decorators.length-1;i>=0;i--){var context={};for(var p in contextIn)context[p]="access"===p?{}:contextIn[p];for(var p in contextIn.access)context.access[p]=contextIn.access[p];context.addInitializer=function(f){if(done)throw new TypeError("Cannot add initializers after decoration has completed");extraInitializers.push(accept(f||null))};var result=(0,decorators[i])("accessor"===kind?{get:descriptor.get,set:descriptor.set}:descriptor[key],context);if("accessor"===kind){if(void 0===result)continue;if(null===result||"object"!=typeof result)throw new TypeError("Object expected");(_=accept(result.get))&&(descriptor.get=_),(_=accept(result.set))&&(descriptor.set=_),(_=accept(result.init))&&initializers.unshift(_)}else(_=accept(result))&&("field"===kind?initializers.unshift(_):descriptor[key]=_)}target&&Object.defineProperty(target,contextIn.name,descriptor),done=!0};!function(TcHmi){!function(Controls){!function(UiProvider){!function(Keyboard){let TcHmiKeyboard=(()=>{let ___closeViaApi_decorators,___handlePointerInteraction_decorators,_classSuper=TcHmi.UiProvider.KeyboardProvider,_instanceExtraInitializers=[];return class TcHmiKeyboard extends _classSuper{static{const _metadata="function"==typeof Symbol&&Symbol.metadata?Object.create(_classSuper[Symbol.metadata]??null):void 0;___closeViaApi_decorators=[TcHmi.CallbackMethod],___handlePointerInteraction_decorators=[TcHmi.CallbackMethod],__esDecorate(this,null,___closeViaApi_decorators,{kind:"method",name:"__closeViaApi",static:!1,private:!1,access:{has:obj=>"__closeViaApi"in obj,get:obj=>obj.__closeViaApi},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(this,null,___handlePointerInteraction_decorators,{kind:"method",name:"__handlePointerInteraction",static:!1,private:!1,access:{has:obj=>"__handlePointerInteraction"in obj,get:obj=>obj.__handlePointerInteraction},metadata:_metadata},null,_instanceExtraInitializers),_metadata&&Object.defineProperty(this,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:_metadata})}static providerName="Beckhoff.TcHmiKeyboard";static keyboardClassFqn="TcHmi.Controls.Beckhoff.TcHmiKeyboard";constructor(){super(TcHmiKeyboard.providerName)}__keyboardCtrl=__runInitializers(this,_instanceExtraInitializers);__popup;__popupEventDestroyers=[];__mutationObserver;__activeTextElement;__footerElement;__localeChangedRegistered=!1;__deviceHasOSK=!1;refreshConfig(){this.__activeTextElement&&this.open(this.__activeTextElement)}open(textElement){if(this.__deviceHasOSK)return{code:TcHmi.Errors.E_NOT_ALLOWED};"virtualKeyboard"in navigator&&navigator.virtualKeyboard instanceof Object&&"addEventListener"in navigator.virtualKeyboard&&"function"==typeof navigator.virtualKeyboard.addEventListener&&"overlaysContent"in navigator.virtualKeyboard&&"boolean"==typeof navigator.virtualKeyboard.overlaysContent?(navigator.virtualKeyboard.addEventListener("geometrychange",this.__closeViaApi),navigator.virtualKeyboard.overlaysContent=!0):window.visualViewport&&(window.visualViewport.addEventListener("resize",this.__closeViaApi),setTimeout((()=>{window.visualViewport?.removeEventListener("resize",this.__closeViaApi)}),400));let requestedInputMode="text";if(textElement.readOnly?requestedInputMode="none":textElement.hasAttribute("data-tchmi-input-mode")?requestedInputMode=textElement.getAttribute("data-tchmi-input-mode"):"numeric"===textElement.getAttribute("inputmode")?requestedInputMode="numeric":("decimal"===textElement.getAttribute("inputmode")||"number"===textElement.type)&&(requestedInputMode="decimal"),"skip"===requestedInputMode)return{code:TcHmi.Errors.E_INVALID};if("none"===requestedInputMode)return TcHmi.Keyboard.close(),{code:TcHmi.Errors.E_INVALID};let result=TcHmi.Keyboard.getLayoutFileFromInputMode(requestedInputMode);if(result.error!==TcHmi.Errors.NONE)return result.details;let keyboardUrl=result.layoutUrl;if(textElement!==this.__activeTextElement&&(this.__mutationObserver?.disconnect(),this.__mutationObserver=void 0,this.__mutationObserver=new MutationObserver((mutationList=>{let keyboardConfigChanged=!1;for(const mutation of mutationList)if("attributes"===mutation.type&&("inputmode"===mutation.attributeName||"data-tchmi-input-mode"===mutation.attributeName||"type"===mutation.attributeName)){keyboardConfigChanged=!0;break}keyboardConfigChanged&&this.__activeTextElement&&this.open(this.__activeTextElement)})),this.__mutationObserver.observe(textElement,{attributes:!0})),this.__localeChangedRegistered||(this.__localeChangedRegistered=!0,TcHmi.EventProvider.register("onLocaleChanged",(()=>{this.__activeTextElement&&this.open(this.__activeTextElement)}))),this.__activeTextElement=textElement,this.__keyboardCtrl)this.__keyboardCtrl.setLayoutFile(keyboardUrl);else{if(this.__keyboardCtrl=TcHmi.ControlFactory.createEx(TcHmiKeyboard.keyboardClassFqn,"tchmi-system-keyboard",{"data-tchmi-layout-file":keyboardUrl,"data-tchmi-left":"0","data-tchmi-top":"0","data-tchmi-width-mode":"Content","data-tchmi-key-padding":{top:4,topUnit:"px",right:4,rightUnit:"px",bottom:4,bottomUnit:"px",left:4,leftUnit:"px"},"data-tchmi-additional-key-backdrop-padding":{top:10,topUnit:"px",right:10,rightUnit:"px",bottom:10,bottomUnit:"px",left:10,leftUnit:"px"}}),!this.__keyboardCtrl)return TcHmi.Log.errorEx("[Source=Framework, Module=TcHmi.Keyboard] Could not compile keyboard with class",TcHmiKeyboard.keyboardClassFqn,". Aborting."),{code:TcHmi.Errors.ERROR};this.__keyboardCtrl.getElement()[0].style.overflow="visible"}const configuredHeight=TcHmi.Keyboard.getContainerLayout()?.height;configuredHeight?(this.__keyboardCtrl.setHeight(configuredHeight),this.__keyboardCtrl.setHeightMode("Value"),this.__keyboardCtrl.setScaleMode("ScaleToFitHeight")):(this.__keyboardCtrl.setHeight(null),this.__keyboardCtrl.setHeightMode("Content"),this.__keyboardCtrl.setScaleMode("None"));const keyboardPosition=TcHmi.Keyboard.getContainerLayout()?.position??"popup";if("footer"===keyboardPosition){if(this.__popup){for(const destroy of this.__popupEventDestroyers)destroy();this.__popupEventDestroyers=[],this.__popup.destroy(),this.__popup=void 0}if(!this.__footerElement){const container=document.createElement("div");container.classList.add("TcHmi_Controls_UiProvider_TcHmiKeyboard-container");const keyboardElem=this.__keyboardCtrl.getElement()[0];keyboardElem.style.margin="10px auto 5px auto",keyboardElem.style.position="unset";const closeButton=document.createElement("a");closeButton.addEventListener("click",this.__closeViaApi),container.append(closeButton,keyboardElem),this.__footerElement=container}this.__footerElement.isConnected||(TcHmi.View.addViewportElement(this.__footerElement,{name:"tchmi-system-keyboard",area:keyboardPosition}),this.__keyboardCtrl.__processIsEnabled(),this.__keyboardCtrl.__processAccessConfig(),this.__footerElement.addEventListener("pointerdown",this.__handlePointerInteraction),document.addEventListener("pointerup",this.__handlePointerInteraction))}else{if(this.__footerElement&&(this.__footerElement.isConnected&&(TcHmi.View.removeViewportElement(this.__footerElement),this.__footerElement.removeEventListener("pointerdown",this.__handlePointerInteraction),document.removeEventListener("pointerup",this.__handlePointerInteraction)),this.__footerElement=void 0),!this.__popup){const popupProvider=TcHmi.UiProvider.getPreferredProvider("popup");if(!popupProvider)return TcHmi.Log.errorEx("[Source=Framework, Module=TcHmi.Keyboard] Could not open keyboard with popup provider. Aborting."),{code:TcHmi.Errors.ERROR};if(!popupProvider.createHtmlElementBox)return TcHmi.Log.errorEx("[Source=Framework, Module=TcHmi.Keyboard] Could not open keyboard with popup provider. The configured popup ui provider does not implement the method 'createHtmlElementBox'. Please make sure that the provider configured in the systemPopups property of tchmiconfig.json implements this method."),{code:TcHmi.Errors.ERROR};if(this.__popup=popupProvider.createHtmlElementBox("",this.__keyboardCtrl.getElement()[0],{},null),this.__popup.setPositioningMode(TcHmi.UiProvider.PopupProvider.PositioningMode.Floating),this.__popup.setBounds({left:50,top:50}),this.__popup.setBackgroundMode(TcHmi.UiProvider.PopupProvider.BackgroundMode.None),this.__popup.setMovable(!0),this.__popup.setStorageSettings({name:"TcHmi.Controls.UiProvider.Keyboard.TcHmiKeyboard",restoreBounds:!0}),this.__popup.setCloseButton(!0),this.__popup.onHide.add(this.__closeViaApi),this.__popup.getElement){const preventUnfocus=event=>{"mousedown"===event.type&&0!==event.button||event.target instanceof Element&&event.target.matches('input, textarea, button, a, select, details, iframe, area, audio, video, [contenteditable], [tabindex]:not([tabindex^="-"])')||event.cancelable&&event.preventDefault()};this.__popupEventDestroyers.push(TcHmi.EventProvider.registerDomEvent(this.__popup.getElement(),"mousedown",preventUnfocus,{passive:!1}),TcHmi.EventProvider.registerDomEvent(this.__popup.getElement(),"touchstart",preventUnfocus,{passive:!1}))}else this.__popup.onBoundsChange.add((()=>{this.__keyboardCtrl?.getIsIndirectInputInProgress()?this.__keyboardCtrl.focusIndirectInputTextbox():this.__activeTextElement?.focus()}))}this.__popup.setJustAbove?.(this.__activeTextElement??null),this.__popup.isShowing()||this.__popup.show()}return{code:TcHmi.Errors.NONE}}__closeViaApi(event){this.__activeTextElement&&("resize"===event?.type&&event.target===window.visualViewport&&(this.__deviceHasOSK=!0),"geometrychange"===event?.type&&"virtualKeyboard"in navigator&&navigator.virtualKeyboard instanceof Object&&event.target===navigator.virtualKeyboard&&"overlaysContent"in navigator.virtualKeyboard&&"boolean"==typeof navigator.virtualKeyboard.overlaysContent&&(navigator.virtualKeyboard.overlaysContent=!1,this.__deviceHasOSK=!0),TcHmi.Keyboard.close())}close(){const wasActive=!!this.__activeTextElement;return this.__activeTextElement=void 0,this.__mutationObserver?.disconnect(),this.__mutationObserver=void 0,"virtualKeyboard"in navigator&&navigator.virtualKeyboard instanceof Object&&"removeEventListener"in navigator.virtualKeyboard&&"function"==typeof navigator.virtualKeyboard.removeEventListener&&navigator.virtualKeyboard.removeEventListener("geometrychange",this.__closeViaApi),window.visualViewport?.removeEventListener("resize",this.__closeViaApi),this.__popup?.hide(),this.__footerElement?.isConnected&&(TcHmi.View.removeViewportElement(this.__footerElement),this.__footerElement.removeEventListener("pointerdown",this.__handlePointerInteraction),document.removeEventListener("pointerup",this.__handlePointerInteraction)),{code:wasActive?TcHmi.Errors.NONE:TcHmi.Errors.E_INVALID}}__activePointerInteraction=!1;__handlePointerInteraction(event){"pointerdown"===event.type?this.__activePointerInteraction=!0:"pointerup"===event.type&&(this.__activePointerInteraction=!1)}hasActiveUserInteraction(){return this.__footerElement?.isConnected?this.__activePointerInteraction||this.__footerElement.contains(document.activeElement):!(!this.__popup&&!this.__footerElement)&&(this.__popup?.hasActiveUserInteraction?.()??!0)}}})();Keyboard.TcHmiKeyboard=TcHmiKeyboard}(UiProvider.Keyboard||(UiProvider.Keyboard={}))}(Controls.UiProvider||(Controls.UiProvider={}))}(TcHmi.Controls||(TcHmi.Controls={}))}(TcHmi||(TcHmi={})),TcHmi.UiProvider.register(new TcHmi.Controls.UiProvider.Keyboard.TcHmiKeyboard);